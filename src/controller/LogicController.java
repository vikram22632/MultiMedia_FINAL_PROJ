package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import model.RGBImg;
import model.RGBVid;
import view.MainWindow;

public class LogicController implements ActionListener, Runnable {
	
	/*
	 * Constructor of the class
	 */
	public LogicController(MainWindow window) {
		/* Add this class as the action listener for the window */
		window.addActionListenerToWindow(this);
		this.display = window;
	}

	/*
	 * @ This function will be used for updating the GUI and doing the main process,
	 * since the main thread will be busy handling the events of the GUI
	 */
	public void run() {
		// TODO Auto-generated method stub
		
	}

	/*
	 * This function will be called upon receiving any button event from the GUI
	 */
	public void actionPerformed(ActionEvent event) {
		/* These actions are generated by the buttons present on the GUI window */
		if("Load Meta Image/Video".equals(event.getActionCommand())) {

			File file = display.getFileChosenByUser();
			if(file != null) {
				if(file.getName().contains(".rgb")) {
					/* Load the meta image */
					metaImg = new RGBImg(MEDIA_WIDTH, MEDIA_HEIGHT, file.getName());
					metaImg.readStandaloneImg(file.getAbsolutePath());

					display.displayMetaImg(metaImg.getImageName(), metaImg.getdisplayImage());
				}
				else {
					/* Load the meta video */
					metaVideo = new RGBVid(MEDIA_WIDTH, MEDIA_HEIGHT, file.getName());
					metaVideo.readVideoFile(file.getAbsolutePath());
					
					/* Display the video on the display screen. This would mean just showing the first
					 * frame of the video on the screen and enabling the video control buttons */
					display.displayMetaVideoFrame(metaVideo.getVideoName(), metaVideo.getNxtVideoFrame(),
																			metaVideo.getTotalFrameCnt());
				}
			}
		}
		else if("Load Query Image".equals(event.getActionCommand())) {
			/* Load the query image on the left side of the window */
			File file = display.getFileChosenByUser();
			if(file != null) {
				queryImg = new RGBImg(MEDIA_WIDTH, MEDIA_HEIGHT, file.getName());
				queryImg.readStandaloneImg(file.getAbsolutePath());
				
				display.displayQueryImg(queryImg.getImageName(), queryImg.getdisplayImage());
			}
		}
		else if("Start Search".equals(event.getActionCommand())) {
			/* TODO: Handle this */
			System.out.println("Start Search");
		}
		else if("<<".equals(event.getActionCommand())) {
			display.updateMetaVideoFrame(metaVideo.getPrevVideoFrame(), metaVideo.getFrameIdx());
		}
		else if("PLAY".equals(event.getActionCommand())) {
			/* TODO: Handle this */
			System.out.println("PLAY");
		}
		else if("PAUSE".equals(event.getActionCommand())) {
			/* TODO: Handle this */
			System.out.println("PAUSE");
		}
		else if(">>".equals(event.getActionCommand())) {
			display.updateMetaVideoFrame(metaVideo.getNxtVideoFrame(), metaVideo.getFrameIdx());
		}
	}
	
	/* members of the class */
	private RGBImg		queryImg;
	private RGBImg		metaImg;
	private RGBVid		metaVideo;
	private MainWindow	display;
	
	private static final int MEDIA_WIDTH = 352;
	private static final int MEDIA_HEIGHT = 288;
}
